from PyQt5 import QtWidgets, QtGui, QtCore

class GroceryListWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        
        self.initUI()
    
    def initUI(self):
        self.setWindowTitle("Grocery List Generator")
        self.setWindowIcon(QtGui.QIcon("icon.png"))
        
        self.groceries = {
            "Monday": [],
            "Tuesday": [],
            "Wednesday": [],
            "Thursday": [],
            "Friday": [],
            "Saturday": [],
            "Sunday": []
        }
        
        self.days = list(self.groceries.keys())
        self.current_day = self.days[0]
        
        self.day_combo = QtWidgets.QComboBox(self)
        self.day_combo.addItems(self.days)
        self.day_combo.setCurrentText(self.current_day)
        self.day_combo.currentTextChanged.connect(self.day_changed)
        
        self.item_edit = QtWidgets.QLineEdit(self)
        self.item_edit.returnPressed.connect(self.add_item)
        
        self.item_list = QtWidgets.QListWidget(self)
        self.update_item_list()
        
        self.add_button = QtWidgets.QPushButton("Add", self)
        self.add_button.clicked.connect(self.add_item)
        
        self.remove_button = QtWidgets.QPushButton("Remove", self)
        self.remove_button.clicked.connect(self.remove_item)
        
        self.generate_button = QtWidgets.QPushButton("Generate Final List", self)
        self.generate_button.clicked.connect(self.generate_final_list)
        
        day_layout = QtWidgets.QHBoxLayout()
        day_layout.addWidget(QtWidgets.QLabel("Day:", self))
        day_layout.addWidget(self.day_combo)
        
        item_layout = QtWidgets.QHBoxLayout()
        item_layout.addWidget(QtWidgets.QLabel("Item:", self))
        item_layout.addWidget(self.item_edit)
        
        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addWidget(self.add_button)
        button_layout.addWidget(self.remove_button)
        button_layout.addWidget(self.generate_button)
        
        layout = QtWidgets.QVBoxLayout()
        layout.addLayout(day_layout)
        layout.addLayout(item_layout)
        layout.addWidget(self.item_list)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
    
    def generate_grocery_list(self):
        final_list = {}
        for day, items in self.groceries.items():
            for item in items:
                if item in final_list:
                    final_list[item] += 1
                else:
                    final_list[item] = 1
        
        result = []
        for item, count in final_list.items():
            if count > 1:
                result.append(f"{item} ({count}x)")
            else:
                result.append(item)
        
        return result
    
    def update_item_list(self):
        items = self.groceries[self.current_day]
        self.item_list.clear()
        self.item_list.addItems(items)
    
    def day_changed(self, day):
        self.current_day = day
        self.update_item_list()
    
    def add_item(self):
        item = self.item_edit.text()
        if item:
            self.groceries[self.current_day].append(item)
            self.item_edit.clear()
            self.update_item_list()
    
    def remove_item(self):
        item = self.item_list.currentItem()
        if item:
            self.groceries[self.current_day].remove(item.text())
            self.update_item_list()
    
    def generate_final_list(self):
        final_list = self.generate_grocery_list()
        self.list_window = QtWidgets.QListWidget()
        self.list_window.addItems(final_list)
        self.list_window.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.list_window.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        copy_selected_action = QtWidgets.QAction("Copy Selected", self.list_window)
        copy_selected_action.triggered.connect(self.copy_selected_items)
        copy_all_action = QtWidgets.QAction("Copy All", self.list_window)
        copy_all_action.triggered.connect(self.copy_all_items)
        self.list_window.addAction(copy_selected_action)
        self.list_window.addAction(copy_all_action)
        self.list_window.show()
    
    def copy_selected_items(self):
        selected_items = [item.text() for item in self.list_window.selectedItems()]
        if selected_items:
            clipboard = QtWidgets.QApplication.clipboard()
            clipboard.setText("\n".join(selected_items))
    
    def copy_all_items(self):
        all_items = [item.text() for item in self.list_window.findItems("*", QtCore.Qt.MatchWildcard)]
        if all_items:
            clipboard = QtWidgets.QApplication.clipboard()
            clipboard.setText("\n".join(all_items))

if __name__ == "__main__":
    app = QtWidgets.QApplication([])
    window = GroceryListWindow()
    window.show()
    app.exec_()
